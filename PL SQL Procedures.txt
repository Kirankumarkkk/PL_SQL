PL SQL : Bro code
====================

CREATE DATABASE myDB;  -create database

USE myDB;      -to use db

DROP DATABASE myDB;   -to delete database

ALTER DATBASE myDB READ ONLY=1;   -to make db readonly

ALTER DATBASE myDB READ ONLY=1;   -to make db not readonly


CREATE TABLE employees ( employee_id INT UNIQUE, first_name VARCHAR(50) , last_name VARCHAR (50) NOT NULL, hourly_pay DECIMAL(5,2), hire_date DATE/DATETIME/TIME);   -to create a table unique data/unique constraint


RENAME TABLE employees TO workers;   -to rename a table

DROP TABLE employees;   -to delete a table

ALTER TABLE employees ADD phone_number VARCHAR(15); -to add one more cloumn to the table

ALTER TABLE employees RENAME COLUMN phone_number to email; -to rename a column

ALTER TABLE employees MODIFY COLUMN email VARCHAR(100); -to modify datatype for the column

ALTER TABLE employees MODIFY COLUMN email VARCHAR(100) AFTER last_name; -to move column after last_name 

ALTER TABLE employees MODIFY COLUMN email VARCHAR(100) FIRST; -to move column to first column

ALTER TABELE employees DROP COLUMN email; -to delete a column from the table

INSERT INTO employees values(1,"kiran","kumar",10.50,"2023-01-02"),(2,"manoj","kumar",20.10,"2024-02-20");  -to insert data into employees table

 
INSERT INTO employees (columnname1,coloumname2,column_date,column_time,column_dateteime) values(value1,value2,CURRENT_DATE(),CURRENT_TIME(), NOW());  -to insert data into employees table. current_date()+1 tomorrow date , null also we set data

select * from employees;    -to select a table

select columnname1,columnname2 from employes where hire_date<="2023-01-01" ;  -where clause != not equal to / less than or equal to / is null / is not null

UPDATE TABLE employees SET hourly_pay=10.25,hire_date=NULL where employee_id=6 -update a column value using where clause 

DELETE FROM employees where employee_id=6; -to delete a row from a table

SET AUTOCOMMIT=OFF -to autocommit off COMMIT; -to commit query ROLLBACK; -to roll back to previous query

ALTER TABLE employees ADD CONSTRAINT UNIQUE(employeeid); -incase forgot to add unique constraint to the column

ALTER TABLE employees MODIFY price DECIMAL (4,2) NOT NULL; -incase forgot to add NOT NULL constraint

create table employees( employeeid INT PRIMARY KEY AUTO_INCREMENT,hourly_pay VARCHAR(5,2) DEFAULT 0,transaction_date DATETIME DEFAULT NOW(), CONSTRAINT chk_hourly_pay CHECK (hourly_pay >=10)) ;   -to add CHECK constraint to check the data and DEFAULT CONSTRAINT 0 or NOW() current date&time and PRIMARY KEY no duplicate with AUTO_INCREMENT this will increment 1+ each time

ALTER TABLE employees ADD CONSTRAINT chk_hourly_pay CHECK ( hourly_pay >= 10.00) ;  -to add check constraint after creating table

ALTER TABLE employees DROP CHECK chk_hourly_pay; -to delete a CHECK constraint

ALTER TABLE employees ALTER price SET DEFAULT 0;  -to add default value to price column

ALTER TABLE employees ADD CONSTRAINT PRIMARY KEY(transactionid); -to add a primary key to the column

ALTER TABLE EMPLOYEES AUTO_INCREMENT=1000; -to set value to increment

CREATE TABLE TRANSACTIONS (transcationid INT PRIMARY KEY AUTO_INCREMENT, CUSTOMERID INT FOREIGN KEY(customerid) REFERENCES customers(customerid) ON DELETE SET NULL / CASCADE) ;   -adding a foreign key to connect another table as relationship , on delete set to NULL or DELETE row

ALTER TABLE TRANSACTIONS ADD CONSTRAINT fk_customer_id FOREIGN KEY(customerid) REFERENCES customers(customerid); -to add a foreign key after table created

ALTER TABLE transactions DROP FOREIGN KEY transactions_ibfk_1; -to delete a foreign key

select count(amount) as count_amount_rows from transactions; -count of rows amount as alias to rename and MAX() or MIN() or AVG() or SUM() or CONCAT(first_name,last_name) as full name adding 2 columns in single function

select * from transactions INNER JOIN customers ON transactions.customerid=customers.customer_id ;  -INNER JOIN matching rows data only

select * from transactions LEFT JOIN customers ON transactions.customerid=customers.customer_id ;  -LEFT JOIN matching rows data only

select * from transactions RIGHT JOIN customers ON transactions.customerid=customers.customer_id ;  -RIGHT JOIN matching rows data only

select * from employes where NOT job="manager" AND NOT job="asst.manager" AND hire_date BETWEEN "2023-01-04" and "2023-03-07" and firstname LIKE "kir%" or "%r" or "_iran"; -AND OR NOT IN  BETWEEN 2 days operators and LIKE % or ki_an wildcards clause

select * from employees ORDER BY last_name DESC, customerid LIMIT 1,1;  -order by last name,customerid  ASC no need by default it will take ASC and LIMIT 1,1 OFFSET LIMITNUMBER,2

SELECT firstname,lastname FROM employees UNION /UNION ALL SELECT firstname,lastname FROM customers -union bring all data from 2 table without duplicates, union all bring duplicate data also

select * from customers AS a INNER JOIN customers AS b ON a.referralid=b.customerid   -self join same table

CREATE VIEW employee_fullname AS select firstname,lastname from employees -creating view & if we update any data of those columns view also gets updated

DROP VIEW employee_fullname; -to delete view

SHOW INDEXES FROM customers; -to see existing indexes to the table

CREATE INDEX last_name_firstname_idx ON customers(lastname,firstname) -to create a new index it will to search for a record less time and update takes more time

ALTER TABLE customers DROP INDEX last_name_index; -to delete a index

select DISTINCT firstname,lastname,(select AVG(hourly_pay) from employees) AS AVG_pay from employees; -adding subquery to fetch the data, adding distinct to  s column

select sum(amount),order_date from transactions GROUP BY order_Date HAVING COUNT(amount) > 1 and HAVING amount is not null;   -group by where clause HAVING we need to use

select sum(amount),order_date from transactions GROUP BY order_Date WITH ROLLUP ; -rollup will total of the amount extension of group by

-ON DELETE SET NULL when FK is deleted, replace FK with NULL
-ON DELETE CASCADE when a FK is deleted, delete row

SET foreign_key_checks=0; -to set 0 when deleting a row

ALTER TABLE transactions DROP FOREIGN KEY fk_customer_id; -to delete a foreign key

ALTER TABLE transaction ADD CONSTRAINT fk_customer_id FOREIGN KEY(customer_id) REFERENCES customers(customerid) ON DELETE SET NULL ; -add ON DELETE SET NULL / CASCADE ADD constraint to the column

===============================
STORED PROCEDURES :
===============================

DELIMITER $$ or //      -to create a procedure
CREATE PROCEDURE get_customers(IN id INT, IN fname VARCHAR(50))
BEGIN
	SELECT * FROM CUSTOMERS where customer_id=id;
END $$ or //
DELIMITER;

CALL get_customers(2,"kiran");    -to call a procedure

DROP PROCEDURE get_customers();  -to delete a procedure


===============================
TRIGGERS :
===============================

- when event happens do something eg, INSERT,UPDATE,DELETE  check data, handle errors, auditing tables

UPDATE BEFORE TRIGGER:
-----------------------

CREATE TRIGGER before_hourly_pay_update
BEFORE UPDATE ON employees
FOR EACH ROW
SET NEW.salary=(NEW.hourlypay*2080);   -update salary TRIGGER created to update before on UPDATE

SHOW TRIGGERS;     -to see triggers


INSERT BEFORE TRIGGER:
--------------------------

CREATE TRIGGER before_hourly_pay_insert
BEFORE INSERT ON employees
FOR EACH ROW
SET NEW.salary=(NEW.hourlypay*2080);   -update salary TRIGGER created to update before on INSERT

UPDATE EXPENSES ANOTHER TABLE:
-------------------------------

UPDATE expenses
SET expense_total= (select sum(salary) from employes) where expense_name="salaries". -to update salary from employees table


DELETE AFTER TRIGGER another table;
-----------------------------------------

CREATE TRIGGER before_hourly_pay_delete
AFTER DELETE ON employees
FOR EACH ROW
UPDATE expenses
SET expense_total=expense_total - OLD.salary
WHERE expense_name="salaries";

INSERT AFTER TRIGGER ANOTHER TABLE:
--------------------------------------

CREATE TRIGGER after_salary_insert
AFTER INSERT ON employees
FOR EACH ROW
UPDATE expenses
SET expense_total=expense_total + NEW.salary
WHERE expense_name="salaries";


UPDATE AFTER TRIGGER ANOTHER TABLE:
--------------------------------------

CREATE TRIGGER after_salary_update
AFTER INSERT ON employees
FOR EACH ROW
UPDATE expenses
SET expense_total= expense_total + (NEW.salary - OLD.salary)
where expense_name="salaries"

==========================================================================

PL/ SQL - procedural language / Structured query language 
-------------------------------------------------------------

Delimeter :
----------

Delimeter/symbol             description

+,-,*,/                    all arithmetic operators
'			   character string delimeter
--		           single line comment
=> 			   association operation
;			   statement terminator
:=			   assignment operator
||			   concatenation operator
>,<,>=,<=,=		   relational operator
/*   */		           multi-line operator	

miscellaneous synonyms/delimeters

Delimeter/symbol             description

--			 single line comment indicator
:    			 host variable indicator
..			 range operator
<>,'=,`=,^=      	 different versions of not equal
%			 attribute indicator
.			 component selector
(,)			 expression or list delimiter
,			 item separator
@			 remote access indicator

Data types:
-----------

scalar : NUMBER,DATE,BOOLEAN,CHAR,VARCHAR,VARCHAR2,DATE,YEAR,MONTH,DAY,HOUR,MINUTE,SECOND,TRUE,FALSE,RAW,NCHAR,NVARCHAR2,LONG,LONG RAW,ROWID,UROWID
large object (LOB) : BFILE,BLOB,CLOB,NCLOB    -to store large object data like text, graphic images/video clips and sound waveforms
composite : data items that have internal components that can be accessed individually	for eg : collections and records			
comparison operators:
---------------------

LIKE - like operator
BETWEEN - range operator
IN - in operator
IS NULL - null comparator operator

procedure syntax:
------------------

CREATE [OR REPLACE] PROCEDURE procedure_name
[(parameter_name[IN | OUT | IN OUT] DataType[,..])]
{IS | AS }
BEGIN
 <procedure_body>
END;

eg :

--to call below preocedure

BEGIN
myfirst;
end;

--to create a procedure

create or replace PROCEDURE myfirst
is
vari number;
begin
	var1:=1;
	dbms_output.put_line('hey' || vari);
end;

Note :
------
1.procedure never return any value
2.it will be get store in database
3.at every call procedure does not compile 

Function syntax:
-----------------

CREATE [OR REPLACE] FUNCTION function_name
[(parameter_name[IN|OUT|IN OUT] type [,..])]
RETURN return_datatype
{IS|AS}
BEGIN
	<function_body>
END [function_name];

difference between procedures and functions:
--------------------------------------------

function
----------
.DML statements cannot be executed within a function
.A function an be called within a query
.A function has no support for try-catch
.A select statement can have a function call
.A function can be called by a procedure
.Whenever a function is called every time it get compiled before being called
.A function returns a value and control to calling function or code
.A function can not have explicit transaction handling

procedure
------------
.DML statements can be executed within a procedure
.A procedure cannot be called within a query
.A procedure has support for try-catch blocks
.A select statement can't have a procedure call
.A procedure cannot be called by a function
.A procedure is compiled once and can be called multiple times without being compiled
.A procedure returns the control but not any value to calling function or code
.A procedure an use explicit transaction handling

IF and IF-ELSE and IF-ELSE IF and IF-ELSE-IF-ELSE statement only syntax:
--------------------------------------------------------------------------

--nested if we can do if conditions

IF(condition) THEN
END IF;

IF(condition) THEN
ELSE
END IF;

IF(condition) THEN
ELSIF(condition) THEN
END IF;

IF(condition) THEN
ELSIF(condition) THEN
ELSE
END IF;

IF(condition) THEN
	IF(condition) THEN
	END IF;
ELSIF(condition) THEN
ELSE
END IF;

Types of loop :
----------------

1. basic loop :
---------------

LOOP 
 if Exit condition THEN
 exit;
 end if;
END LOOP;

2. for loop :
--------------

FOR variablename IN Range(1..10)
LOOP

END loop;

3. while loop:
---------------
while Exit Condition
LOOP

END LOOP;

cursor : it helps to fetch multiple rows data
--------

cursor writing steps:
--------------------
1.declare cursor
2.open cursor
3.fetch cursor
4.close the cursor

cursor syntax:
---------------
Declare 
	CURSOR cursorname IS select query;
begin
	OPEN cursorname;
	FETCH cursorname INTO variablename;
	close the cursorname;
end;

Attributes of cursor:
----------------------

%FOUND
%NOTFOUND
%ISOPEN
%ROWACOUNT



1.explicit cursor: parameterized cursor (parameter value) and non-parameterized cursor (without parameter value)

2.implicit cursor : inbuild cursor , by default exit in pl sql 



Procedures:
=============

Hello world program and declaring variables
----------------------------------------------

set SERVEROUTPUT ON  -to enable output

DECLARE
  message varchar2(100):= 'Hello, World! ';   --declare variables
  myvar1 number:=123;
  myvar2 number:=1;
  myvar3 number;
  myvar4 varchar2(50);
  myvar5 date;
  myvar6 char(10);
  myvar7 BOOLEAN:=true;
  myvar10 BOOLEAN:=true;
  myvar11 BOOLEAN:=false;
  myvar8 number;
  myvar9 number;
  
BEGIN 
  
  myvar3:=myvar1+myvar2;
  myvar4:='hello varchar 50';
  myvar5:=to_date(sysdate,'DD-MM-YYYY');
  myvar6:='hey1';
  myvar8:=1+8;
  myvar9:=5;

  dbms_output.put_line(message || myvar3); 
  dbms_output.put_line(message || myvar4);
  dbms_output.put_line(message || myvar5);
  dbms_output.put_line(message || myvar6);
  dbms_output.put_line(message || myvar8);
  dbms_output.put_line(message || myvar9**2);

--if and or block

  if ((myvar7 and myvar10) or myvar11)
  then
	  dbms_output.put_line('i am in if block and or');
  end if;

--if not block

  if(not myvar11)
  then
  dbms_output.put_line('i am in if not block');
  end if;

   select employeeid,name into myvar1,fullname from employees where employeeid is not null and employeename like 'SMITH%' and hiredate between to_date('16-DEC-1960','DD-MM-YYYY') and to_date('16-JAN-1981','DD-MM-YYYY) ;    --employeeid and myvar1 should be same datatype into query

   

END;
/

find minimum number procedure:
------------------------------

--create procedure to find minimum 

create or replace procedure findmini(x IN NUMBER, y IN NUMBER , z OUT NUMBER) 
IS
--to declare any variables
BEGIN
	IF x < y then
	z:=x;
	ELSE
	z:=y;
	END IF;
END;

--to call procedure

declare 
	a number;
	b number;
	c number;
begin
	a:=1;
	b:=2;
	findmini(a,b,c);
end;
/
	
update salary for a employee :
-------------------------------

--creating procedure for updating salary

create or replace procedure updatesalary(empid IN NUMBER,percentage IN NUMBER,newsalary OUT NUMBER)
IS mysalary number;
   incamt number;
BEGIN
	SELECT salary into mysalary 
	from employees where employeeid=empid;
	inctamt:=(mysalary*percentage)/100;
	mysalary:=incamt+mysalary;
	
	update employees set salary =mysalary where employeeid=empid;
	newsalary:=mysalary;

end;
/

--to call procedure

declare 
	a number;
	b number;
	c number;
begin
	a:=10;
	b:=10;
	updatesalary(a,b,c);
end;
/

--to delete a procedure

DROP PROCEDURE updatesalary;


create function to return number :
-----------------------------------

--creating function

create or replace function my_fun
return number 
is

total number(10,2) :=0 ;

begin

select sum(salary) into total from employees;

return total;

end;
/

--calling function using procedure with block statement below

set serveroutput on

declare 
	c number(10,2);
begin
	c:=myfun;

end;
/

--creating function and passing parameter 

CREATE OR REPLACE FUNCTION mysum (empid IN number)
RETURN number IS
	total number(10):=0;
BEGIN
	SELECT salary into total
	FROM employees where empployeeid=empid;
	RETURN total;
END;
/

--calling function using procedure 

DECLARE 
	c number(10,2);
	empid number(10):=7369;
BEGIN
	c:=mysum(empid);
END;
/

--to delete a function use below command

drop function mysum;

IF conditions statements only procedure :
------------------------------------------------

--creating a procedure using if condition

create or replace procedure myempproc(empid IN number)
IS
	empsalary number(7,2):=0;
	incsalary number(7,2):=0;
        myempvar number:=20020;
BEGIN
	select salary into empsalary
	from employees_bk where employeeid=empid;
	
        if(empsalary > 2000) then
	dbms_output.putline('your salary greater then 2000:' || empsalary);
	end if;

  if(myempvar>2000) then
  dbms_output.put_line('myempvar is greater than 2000 ' || myempvar);
  elsif (myempvar>2000) then
  dbms_output.put_line('myempvar is greater than 3000' || myempvar);
  else
    dbms_output.put_line('else condition' || myempvar);
  end if;

END;


--calling above procedure passing empid in the parameter

set serveroutput on
begin
	myempproc(7369);
end;

lOOP procedures:
--------------------
 
basic loop procedure below and calling
--------------------------------------

set serveroutput on
DECLARE
  var1 number:=0;
BEGIN
   Loop
     if(var1>10) then
          dbms_output.put_line('exit loop'|| var1);
	exit;
     end if;
     dbms_output.put_line('i am basic loop'|| var1);
     var1:=var1+1; 
     end loop;
     dbms_output.put_line('i am out of the loop'|| var1);

end;
/

for loop procedure using below code
-----------------------------------

set serveroutput on
DECLARE
  var1 number:=0;
BEGIN

   for var1 in 1..5
   Loop
          dbms_output.put_line('i am inside loop '|| var1);
     end loop;
     dbms_output.put_line('i am out of the loop'|| var1);

end;
/

while loop procedure using below code
---------------------------------------

set serveroutput on
DECLARE
  var1 number:=0;
BEGIN

   while(var1<10)
   Loop
          dbms_output.put_line('i am inside loop '|| var1);
              var1:=var1+1; 
     end loop;
     dbms_output.put_line('i am out of the loop'|| var1);

end;
/


cursor procedure without parameter:
-------------------------------

--creating procedure

set serveroutput on
create or replace procedure printemployeerec
IS
  empid number(4):=0;
  empsalary employees.salary%type;  --declareing  empsalary to employees table salary column same data type
  emprec employees%ROW;  --emprec holds entire row and ROW data type 
  CURSOR emp_cursor is select employeeid,salary from employees   

BEGIN

 open emp_cursor;

    LOOP
       FETCH emp_cursor into empid,empsalary;
       EXIT WHEN emp_cursor%not found
       dbms_output.put_line('loop cursor'||empid|| empsalary);
     end loop;

close emp_cursor;

       dbms_output.put_line('end of the program');


end;
/

--calling procedure without parameter

begin
printemployeerec();
end;



cursor procedure with parameter:
-------------------------------

--creating procedure

set serveroutput on
create or replace procedure printemployeerec(depid number)
IS
  empid number(4):=0;
  empsalary employees.salary%type;  --declareing  empsalary to employees table salary column same data type
  emprec employees%ROW;  --emprec holds entire row and ROW data type 
  CURSOR emp_cursor is select employeeid,salary from employees where DEPARTMENT_ID=depid;   

BEGIN

 open emp_cursor;

if(emp_cursor%isopen) then

       dbms_output.put_line('cursor is open');

end if;

    LOOP
       FETCH emp_cursor into empid,empsalary;
       EXIT WHEN emp_cursor%not found
       dbms_output.put_line('loop cursor'||empid|| empsalary);
     end loop;

close emp_cursor;

       dbms_output.put_line('end of the program');
       dbms_output.put_line('end of the program'|| emp_cursor%rowCount);



end;
/

--calling procedure with parameter

begin
printemployeerec(10);
end;


